# Data

## Technical Description

The SLD dataset (url: https://edg.epa.gov/EPADataCommons/public/OA/EPA_SmartLocationDatabase_V3_Jan_2021_Final.csv) was gathered by EPA (United States Environmental Protection Agency), which summarizes more than 90 different indicators associated with the built environment and location efficiency.Most attributes are available for all U.S. block groups.

EPA first released a beta version of the Smart Location Database in 2011. The initial full version was released in 2013, and the database was updated to its current version in 2021.

The format of the data is geometry data based on census block groups. We plan to select the features that can best describe our research question, and select the data falls into Manhatten area in New York city. We plan to plot the density distribution of the data to examine the usability of the features for future use.

### Data dimension
```{r}
# open the file
library(readr)

url <- "https://edg.epa.gov/EPADataCommons/public/OA/EPA_SmartLocationDatabase_V3_Jan_2021_Final.csv"

# read CSV 
sld2021 <- read_csv(url)


#sld2021 <- read.csv("EPA_SmartLocationDatabase_V3_Jan_2021_Final.csv", colClasses = #c(GEOID = "character"))

columns <- colnames(sld2021)

print(columns)
```

### Feature selection
```{r}

#select features
selected_columns <- c("GEOID20", "STATEFP", "COUNTYFP", "TRACTCE", "BLKGRPCE", 
                      "P_WrkAge", "Pct_AO1", "Pct_AO2p", "R_HiWageWk", 
                      "E_HiWageWk", "D1A", "D1B", "D1C", "D1C8_HLTH", "D1D", 
                      "D2A_JPHH", "D2A_EPHHM", "D2C_TRIPEQ", "D2R_JOBPOP", 
                      "D2C_WREMLX", "D3A", "D3AAO", "D3AMM", "D3APO", "D3B", 
                      "D3BAO", "D3BMM4", "D3BPO4", "D4A", "D4C", "D4D", 
                      "D5AR", "D5AE", "D5BR", "D5BE", "D5CR", "D5CRI")

new_sld2021 <- sld2021[, selected_columns]
new_sld2021
```
### Area selection
```{r}
#Select data for manhatten
NY_data <- new_sld2021[new_sld2021$STATEFP == 36, ]

# Display the filtered DataFrame
NY_data

man_data <- NY_data[NY_data$COUNTYFP == 61, ]
man_data
```
### Density check
```{r,fig.height=35, fig.width=20}
library(ggplot2)
library(gridExtra)

# Define the columns to plot
columns_to_plot <- c(
  "P_WrkAge", "Pct_AO1", "Pct_AO2p", "R_HiWageWk", 
  "E_HiWageWk", "D1A", "D1B", "D1C", "D1C8_HLTH", "D1D", 
  "D2A_JPHH", "D2A_EPHHM", "D2C_TRIPEQ", "D2R_JOBPOP", 
  "D2C_WREMLX", "D3A", "D3AAO", "D3AMM", "D3APO", "D3B", 
  "D3BAO", "D3BMM4", "D3BPO4", "D4A", "D4C", "D4D", 
  "D5AR", "D5AE", "D5BR", "D5BE", "D5CR", "D5CRI"
)

# Create a list to hold the ggplot objects
plots <- list()

# Generate density plots for each column
for (column in columns_to_plot) {
  p <- ggplot(man_data, aes_string(x = column)) +
    geom_density(fill = "blue", alpha = 0.4) +
    labs(title = paste("Density plot of", column, "preprocessed"),
         x = column, y = "Density") +
    theme_minimal()
  plots[[column]] <- p
}

# Arrange the plots in a grid (7 rows, 5 columns)
grid_layout <- do.call(grid.arrange, c(plots, nrow = 7, ncol = 5))


```

## Missing value analysis
```{r}
# Install and load DataExplorer
#install.packages("DataExplorer")
library(DataExplorer)

# Visualize missing data
plot_missing(man_data)

```
There is no missing value because all features are with 0 missing rows.

```{r}
library(VIM) 

#no missing value
sum(is.na(man_data))
colSums(is.na(man_data))

aggr(man_data, col = c('navyblue', 'red'), numbers = TRUE, sortVars = TRUE, 
     labels = names(man_data), cex.axis = 0.7, gap = 3, 
     main = "Missing Data Overview")
```
There is no missing data because proportion of missings is 0. If the combination count is 1 in the output of the aggr() function, it means there is only one distinct pattern of missingness across all the variables in the dataset. In other words:Every row with missing values has missingness in the exact same set of variables.No other unique missing value patterns exist in the dataset.

### Data rescale 
```{r}
#rescale the data
# Load required library
library(scales)

# Define the columns to scale
columns_to_scale <- c("P_WrkAge", "Pct_AO1", "Pct_AO2p", "R_HiWageWk", 
                      "E_HiWageWk", "D1A", "D1B", "D1C", "D1C8_HLTH", "D1D", 
                      "D2A_JPHH", "D2A_EPHHM", "D2C_TRIPEQ", "D2R_JOBPOP", 
                      "D2C_WREMLX", "D3A", "D3AAO", "D3AMM", "D3APO", "D3B", 
                      "D3BAO", "D3BMM4", "D3BPO4", "D4A", "D4C", "D4D", 
                      "D5AR", "D5AE", "D5BR", "D5BE", "D5CR", "D5CRI")

# Apply Min-Max scaling to the selected columns
man_data[columns_to_scale] <- lapply(man_data[columns_to_scale], rescale)

# Print the scaled data
print(man_data)
```